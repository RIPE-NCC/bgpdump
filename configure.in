dnl Process this file with autoconf to produce a configure script.
AC_REVISION($Revision$)

AC_INIT([libbgpdump], 1.4.1, [ris@ripe.net])
AC_CONFIG_SRCDIR([bgpdump_lib.c])
AC_CONFIG_HEADERS([bgpdump-config.h])

CFLAGS="$CFLAGS -Wall -Wformat=2 -Wcast-align -Wsystem-headers -Wno-format-y2k -W -Wno-unused-parameter -Wstrict-prototypes -Wmissing-prototypes -Wpointer-arith -Wreturn-type -Wcast-qual -Wwrite-strings -Wswitch -Wshadow -Wcast-align -Wunused-parameter -O3"

# Checks for programs.
AC_PROG_CC
AC_PROG_RANLIB
AC_PATH_PROG([AR], [ar])

if test -z "$AR"; then
    AC_PATH_PROG([AR], [ar], , /usr/ccs/bin)
    if test -z "$AR"; then
        AC_MSG_ERROR([no ar found in /usr/ccs/bin:$PATH])
    fi
fi

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([errno.h strings.h unistd.h arpa/inet.h fcntl.h netinet/in.h stdlib.h string.h sys/socket.h syslog.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_STRUCT_TM

# Check for u_*_t
AC_CHECK_TYPE(u_char_t, , AC_DEFINE(u_char_t, uchar_t, [Define if system headers do not define u_char_t]))
AC_CHECK_TYPE(u_int8_t, , AC_DEFINE(u_int8_t, uint8_t, [Define if system headers do not define u_int8_t]))
AC_CHECK_TYPE(u_int16_t, , AC_DEFINE(u_int16_t, uint16_t, [Define if system headers do not define u_int16_t]))
AC_CHECK_TYPE(u_int32_t, , AC_DEFINE(u_int32_t, uint32_t, [Define if system headers do not define u_int32_t]))

# Checks for library functions.
AC_FUNC_MEMCMP
AC_CHECK_FUNCS([memset])

# Check for zlib
AC_CHECK_LIB(z, gzopen, [], AC_DEFINE(DONT_HAVE_GZ, 1))

# Check for libbz2
AC_CHECK_LIB(bz2, BZ2_bzReadOpen, [], AC_DEFINE(DONT_HAVE_BZ2, 1))

# Check for inet_ntoa in -lnsl if not found (Solaris)
AC_CHECK_FUNCS(inet_ntoa, [], AC_CHECK_LIB(nsl, inet_ntoa, [], AC_MSG_ERROR([inet_ntoa not found],1)))
AC_CHECK_FUNCS(inet_ntop, [], AC_CHECK_LIB(nsl, inet_ntop, [], AC_MSG_ERROR([inet_ntop not found],1)))

AC_ARG_ENABLE(ipv6, AC_HELP_STRING([--disable-ipv6], [disable support for IPv6]))

if test "$enable_ipv6" != "no"; then
	disable_ipv6=no
fi

AC_MSG_CHECKING(for IPv6 support)
if test "$disable_ipv6" != no; then
  AC_MSG_RESULT(disabled)
else
  AC_TRY_RUN([ /* AF_INET6 avalable check */
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
main()
{
 struct in6_addr src;
 char buf[128];
 if (inet_ntop(AF_INET6,&src,buf,128)==NULL)
   exit(1);
 else
   exit(0);
}
    ],ipv6=yes,ipv6=no,ipv6=yes)
  
if test "$ipv6" = "yes"; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(BGPDUMP_HAVE_IPV6, 1, [The library will be compiled with IPv6 support])
else
  AC_MSG_RESULT(no)
fi
fi

OS=`uname|sed -e 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
case $OS in
	darwin*)
		LDFLAGS='-dynamiclib'
		;;
	*)
		LDFLAGS='-shared'
		;;
esac

AC_SUBST(CFLAGS)
AC_SUBST(LIBS)

AC_OUTPUT(Makefile)
